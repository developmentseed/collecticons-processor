defaults: &defaults
  docker:
    - image: node:8
  working_directory: ~/repo
  environment:
    - PRODUCTION_BRANCH: master


version: 2
jobs:
  test:
    <<: *defaults
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: yarn test

  check_version:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Check version
          command: |
              # Get the PR number from the url to perform que query.
              pr_number=$(
                echo $CIRCLE_PULL_REQUEST | sed -E "s/.+\/([0-9]+)$/\1/g"
              )
              if [[ -n ${pr_number} ]]; then
                curl -L "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" -o jq
                chmod +x jq
                url="https://api.github.com/repos/developmentseed/collecticons-processor/pulls/$pr_number?access_token=$GITHUB_TOKEN"
                # Get The PR target branch from the resposne.
                target_branch=$(
                  curl "$url" | ./jq -r '.base.ref'
                )

                if [ "${target_branch}" == "${PRODUCTION_BRANCH}" ]; then
                  package_version=$(
                    cat package.json | ./jq -r '.version'
                  )

                  # Disable errors to avoid egrep killing the script.
                  set +e
                  version_exists=$(
                    git tag --list | egrep -c "^v${package_version}$"
                  )
                  # Enable errors again.
                  set -e

                  if [[ $version_exists -eq 0 ]]; then
                    echo "Version ($package_version) is ok";
                  else
                    echo "Version ($package_version) already exists";
                    exit 1
                  fi

                else
                  echo "Not targetting ${PRODUCTION_BRANCH} branch"
                fi
              fi

  publish:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy to npm
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish

workflows:
  version: 2
  test:
    jobs:
      - test
      - check_version
  test-n-publish:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish:
          requires:
            - test
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/